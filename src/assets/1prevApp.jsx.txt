import { useState } from 'react'
import './App.css'

const API_KEY = import.meta.env.VITE_API_KEY

function App() {
  const [currentArt, setCurrentArt] = useState(null)
  const [bannedTerms, setBannedTerms] = useState([])
  const [isLoading, setIsLoading] = useState(false)

  const fetchArt = async () => {
    setIsLoading(true)
    try {
      let artwork = null
      let attempts = 0
      
      do {
        const response = await fetch(
          `https://api.harvardartmuseums.org/object?apikey=${API_KEY}&size=1&sort=random&hasimage=1&q=imagepermissionlevel:0`
        )
        const data = await response.json()
        artwork = data.records[0]
        attempts++
      } while (attempts < 10 && (
        isArtBanned(artwork) || 
        !artwork?.primaryimageurl
      )) // Fixed parentheses

      if (artwork?.primaryimageurl && !isArtBanned(artwork)) {
        setCurrentArt(artwork)
      } else {
        setCurrentArt(null)
      }
    } catch (error) {
      console.error('Error fetching art:', error)
    } finally {
      setIsLoading(false)
    }
  }


  const isArtBanned = (artwork) => {
    if (!artwork) return true // Consider missing artwork as banned
    
    const attributesToCheck = {
      title: artwork.title?.toLowerCase(),
      artist: artwork.people?.[0]?.name?.toLowerCase(),
      culture: artwork.culture?.toLowerCase(),
      period: artwork.period?.toLowerCase(),
      century: artwork.century?.toString(),
      technique: artwork.technique?.toLowerCase()
    }

    return Object.values(attributesToCheck).some(value => {
      if (!value) return false
      const values = Array.isArray(value) ? value : [value]
      return values.some(v => 
        bannedTerms.map(t => t.toLowerCase()).includes(v.toLowerCase())
      )
    })
  }

  const handleBanToggle = (term) => {
    setBannedTerms(prev => 
      prev.includes(term) 
        ? prev.filter(t => t !== term)
        : [...prev, term]
    )
  }

  return (
    <div className="app-container">
      <main className="main-content">
        <section className="art-display">
          <h2>Art Discovery</h2>
          
          {isLoading ? (
            <div className="loading">üîç Searching for art...</div>
          ) : (
            <>
              {currentArt?.primaryimageurl ? (
                <img 
                  src={currentArt.primaryimageurl} 
                  alt={currentArt.title || 'Artwork'} 
                  className="art-image"
                  onError={(e) => {
                    e.target.style.display = 'none'
                    document.querySelector('.image-fallback')?.classList.remove('hidden')
                  }}
                />
              ) : null}
              
              <div className={`image-fallback ${currentArt?.primaryimageurl ? 'hidden' : ''}`}>
                {currentArt ? (
                  <>
                    <div className="placeholder-text">üñºÔ∏è Image Not Available</div>
                    <p className="art-description">
                      {currentArt.description?.slice(0, 200) || 'No description available'}
                    </p>
                  </>
                ) : (
                  <div className="placeholder-text">Click Discover to start exploring!</div>
                )}
              </div>

              <div className="attributes">
                {[
                  { label: 'Title', value: currentArt?.title },
                  { label: 'Artist', value: currentArt?.people?.[0]?.name },
                  { label: 'Culture', value: currentArt?.culture },
                  { label: 'Period', value: currentArt?.period },
                  { label: 'Medium', value: currentArt?.technique },
                  { label: 'Date', value: currentArt?.dated },
                ].map(({ label, value }) => (
                  value && (
                    <button
                      key={`${label}-${value}`}
                      className={`attribute ${bannedTerms.includes(value) ? 'banned' : ''}`}
                      onClick={() => handleBanToggle(value)}
                    >
                      <strong>{label}:</strong> {value}
                    </button>
                  )
                ))}
              </div>
            </>
          )}
          
          <button 
            className="discover-btn"
            onClick={fetchArt}
            disabled={isLoading}
          >
            {currentArt ? 'üé® Discover More Art' : '‚ú® Start Discovering'}
          </button>
        </section>

        <aside className="ban-list">
          <h3>üö´ Excluded Terms</h3>
          {bannedTerms.length === 0 ? (
            <p className="empty-list">No terms excluded yet</p>
          ) : (
            <div className="banned-items">
              {bannedTerms.map(term => (
                <div 
                  key={term} 
                  className="banned-item"
                  onClick={() => handleBanToggle(term)}
                >
                  {term}
                  <span className="remove-btn">√ó</span>
                </div>
              ))}
            </div>
          )}
        </aside>
      </main>
    </div>
  )
}

export default App